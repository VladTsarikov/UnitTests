import org.testng.annotations.AfterMethod;
        import org.testng.annotations.BeforeMethod;
        import org.testng.annotations.Test;
        import java.io.*;
        import java.util.Scanner;
        import static org.testng.Assert.*;

public class PenTest {

    private Pen pen;
    private File file;
    private final static String FILE_PATH = "src/test/resources/color.txt";

    @BeforeMethod
    public void setUp() {

    }

    @AfterMethod
    public void tearDown() {

        pen = null;

    }

    @Test(  dataProvider = "MethodWriteData",dataProviderClass=DataProviderSource.class,
            groups={"MethodWrite"})
    public void testPenWrite_shouldWriteCorrectValue(String word,
                                                     int inkContainerValue,
                                                     double sizeLetter ,
                                                     String color,
                                                     String expectedValue) {

        pen = new Pen(inkContainerValue, sizeLetter ,color);

        assertEquals(pen.write(word),expectedValue);

    }

    @Test(  dataProvider = "MethodWriteIncorrectData",dataProviderClass=DataProviderSource.class,
            groups={"MethodWrite"}, expectedExceptions = NullPointerException.class)
    public void testPenWrite_shouldVerifyForNull(String word,
                                                 int inkContainerValue,
                                                 double sizeLetter ,
                                                 String color) {

        pen = new Pen(inkContainerValue, sizeLetter ,color);

        pen.write(word);

    }

    @Test(dataProvider = "ThirdConstructorData",dataProviderClass=DataProviderSource.class)
    public void testPenGetColor_shouldGetColor(int inkContainerValue, double sizeLetter ,
                                               String color) {

        pen = new Pen(inkContainerValue,sizeLetter,color);

        assertEquals(pen.getColor(),color);

    }

    @Test(  dataProvider = "MethodIsWorkData",dataProviderClass=DataProviderSource.class,
            groups={"MethodIsWork"})
    public void testPenIsWork_shouldWork(int inkContainerValue) {

        pen = new Pen(inkContainerValue);

        assertTrue(pen.isWork());

    }

    @Test(dataProvider = "MethodIsWorkIncorrectData", dataProviderClass=DataProviderSource.class,
            groups="MethodIsWork")
    public void testPenIsWork_shouldNotWork(int inkContainerValue) {

        pen = new Pen(inkContainerValue);

        assertFalse(pen.isWork());

    }

    @Test(dataProvider = "ThirdConstructorData",dataProviderClass=DataProviderSource.class)
    public void testPenDoSomethingElse_shouldWriteToConsole(int inkContainerValue,
                                                            double sizeLetter ,
                                                            String color) throws IOException {

        pen = new Pen(inkContainerValue,sizeLetter,color);

        file = new File(FILE_PATH);
        String absolutePath = file.getCanonicalPath();
        PrintStream st = new PrintStream(new FileOutputStream(new File(absolutePath)));
        System.setErr(st);
        System.setOut(st);

        pen.doSomethingElse();

        FileReader fr = new FileReader(absolutePath);
        Scanner scan = new Scanner(fr);
        String actualColor = scan.nextLine();
        if (actualColor.equals("null")){
            actualColor = null;
        }

        fr.close();

        assertEquals(actualColor, color);

    }

    @Test(dataProvider = "FirstConstructorData",dataProviderClass=DataProviderSource.class)
    public void testFirstConstructor_shouldCreateObject(int inkContainerValue)  {

        Pen pen = new Pen(inkContainerValue);

        assertNotNull(pen);

    }

    @Test(dataProvider = "SecondConstructorData",dataProviderClass=DataProviderSource.class)
    public void testSecondConstructor__shouldCreateObject(int inkContainerValue,
                                                          double sizeLetter)  {

        Pen pen = new Pen(inkContainerValue,sizeLetter);

        assertNotNull(pen);

    }

    @Test(dataProvider = "ThirdConstructorData",dataProviderClass=DataProviderSource.class)
    public void testThirdConstructor__shouldCreateObject(int inkContainerValue,
                                                         double sizeLetter ,
                                                         String color)  {

        Pen pen = new Pen(inkContainerValue,sizeLetter,color);

        assertNotNull(pen);

    }



}